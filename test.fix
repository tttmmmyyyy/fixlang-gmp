module Test;

import GMP.Z;
// import GMP.Q;

test : IO ();
test = (
    let num = MPZ::zero;
    +assert_eq(|_|"case 0", num.to_string, "0");
    
    let num = MPZ::from_decimal("012345678990123456789").as_some;
    +assert_eq(|_|"case 1", num.to_string, "12345678990123456789");

    let num = MPZ::from_decimal("xyz");
    +assert(|_|"case 1.5", num.is_none);

    // Updating shared data
    let num1 = MPZ::from_I64(2);
    let num2 = num1.set_string("7F", 16).as_some;
    let num3 = num1 * num2;
    +assert_eq(|_|"case 1.6", num3.to_string, "254");

    let num = MPZ::from_I64(-12345);
    +assert_eq(|_|"case 2", num.to_string, "-12345");

    let num = num.set_I64(54321);
    +assert_eq(|_|"case 2.1", num.to_string, "54321");

    let num = MPZ::from_U64(31415_U64);
    +assert_eq(|_|"case 3", num.to_string, "31415");

    let num = num.set_U64(27182_U64);
    +assert_eq(|_|"case 3.1", num.to_string, "27182");

    // Test `to_I64`
    let num = MPZ::from_I64(1234);
    +assert_eq(|_|"case to_I64 success", num.to_I64.as_some, 1234);

    let num = MPZ::from_string("12345678901234567890123", 10).as_some;
    +assert(|_|"case to_I64 fail", num.to_I64.is_none);

    // Test `to_U64`
    let num = MPZ::from_U64(1234_U64);
    +assert_eq(|_|"case to_U64 success", num.to_U64.as_some, 1234_U64);

    let num = MPZ::from_string("12345678901234567890123", 10).as_some;
    +assert(|_|"case to_U64 fail", num.to_U64.is_none);

    // Test `to_F64`
    let num = MPZ::from_I64(1234);
    +assert_eq(|_|"case to_F64", num.to_F64, 1234.0);

    // Test `to_F64_2exp`
    let num = MPZ::from_string("5", 10).as_some;
    let (mantissa, exponent) = num.to_F64_2exp;
    +assert_eq(|_|"case to_F64_2exp mantissa", mantissa, 0.625);
    +assert_eq(|_|"case to_F64_2exp exponent", exponent, 3);

    // Addition
    let x = MPZ::from_I64(1234);
    let y = MPZ::from_I64(5678);
    let z = x + y;
    +assert_eq(|_|"case 4", z.to_string, "6912");

    // Subtraction (both unique)
    let x = MPZ::from_I64(1234);
    let y = MPZ::from_I64(5678);
    let z = x - y;
    +assert_eq(|_|"case 5", z.to_string, "-4444");

    // Subtraction (lhs shared)
    let x = MPZ::from_I64(1234);
    let y = MPZ::from_I64(5678);
    let z = x - y;
    +assert_eq(|_|"case 5.1", z.to_string, "-4444");
    let z = z - x;
    +assert_eq(|_|"case 5.1.0", z.to_string, "-5678");

    // Subtraction (rhs shared)
    let x = MPZ::from_I64(1234);
    let y = MPZ::from_I64(5678);
    let z = x - y;
    +assert_eq(|_|"case 5.2", z.to_string, "-4444");
    let z = z + y;
    +assert_eq(|_|"case 5.2.0", z.to_string, "1234");

    // Subtraction (both shared)
    let x = MPZ::from_I64(1234);
    let y = MPZ::from_I64(5678);
    let z = x - y;
    +assert_eq(|_|"case 5.3", z.to_string, "-4444");
    let z = z - x + y;
    +assert_eq(|_|"case 5.3.0", z.to_string, "0");

    // Multiplication
    let x = MPZ::from_I64(1234);
    let y = MPZ::from_I64(5678);
    let z = x * y;
    +assert_eq(|_|"case 6", z.to_string, "7006652");

    // Negation
    let x = MPZ::from_I64(1234);
    let y = -x;
    +assert_eq(|_|"case 7", y.to_string, "-1234");

    // Negation (shared)
    let x = MPZ::from_I64(1234);
    let y = -x;
    let z = y + x;
    +assert_eq(|_|"case 7.1", z.to_string, "0");

    // Absolute value
    let x = MPZ::from_I64(-1234);
    let y = x.abs;
    +assert_eq(|_|"case 8", y.to_string, "1234");

    // Multiplication by a power of 2
    let x = MPZ::from_I64(1234);
    let y = x.mul_2exp(10_U64);
    +assert_eq(|_|"case 9", y.to_string, "1263616");

    // Comparison
    let x = MPZ::from_I64(1234);
    let y = MPZ::from_I64(5678);
    +assert(|_|"case 7", x != y);

    let x = MPZ::from_I64(1234);
    let y = MPZ::from_I64(5678);
    let z = MPZ::from_I64(1234 * 5678);
    +assert(|_|"case 8", x * y == z);

    // let num = MPQ::from_I64(4, -6);
    // let _ = assert_eq(|_|"case 4", num.to_string, "-2/3");

    // let num = MPQ::from_I64(1, 4) + MPQ::from_I64(1, 6);
    // let _ = assert_eq(|_|"case 5", num.to_string, "5/12");

    // let num = MPQ::from_I64(3, 5) / MPQ::from_I64(9, 10);
    // let _ = assert_eq(|_|"case 6", num.to_string, "2/3");

    // let lhs = MPQ::from_I64(3, 5);
    // let rhs = MPQ::from_I64(6, 10);
    // let _ = assert_eq(|_|"case 7", lhs == rhs, true);

    // let lhs = MPQ::from_I64(3, 5);
    // let rhs = MPQ::from_I64(7, 10);
    // let _ = assert_eq(|_|"case 8", lhs == rhs, false);

    // let lhs = MPQ::from_I64(3, 5);
    // let rhs = MPQ::from_I64(7, 10);
    // let _ = assert_eq(|_|"case 9", lhs < rhs, true);

    // let lhs = MPQ::from_I64(3, 5);
    // let rhs = MPQ::from_I64(6, 10);
    // let _ = assert_eq(|_|"case 10", lhs >= rhs, true);

    pure()
);