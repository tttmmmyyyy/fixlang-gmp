module GMP.Z;

import Hash;

type MPZ = unbox struct { _data : Destructor Ptr };

namespace MPZ {

    // Private or internal functions 
    _make : () -> MPZ;
    _make = |_| (
        let ptr = FFI_CALL[Ptr fix_mpz_init()];
        let dtor = |ptr| IO::from_runner $ |ios| (
            let (ios, _) = FFI_CALL_IO[() fix_mpz_clear(Ptr), ptr, ios];
            (ios, nullptr)
        );
        MPZ { _data : Destructor::make(ptr, dtor) }
    );

    _is_unique_data : MPZ -> (Bool, MPZ);
    _is_unique_data = |num| (
        let (is_unique, data) = num.@_data.unsafe_is_unique;
        (is_unique, MPZ { _data : data })
    );

    borrow_ptr : (Ptr -> a) -> MPZ -> a;
    borrow_ptr = |proc, num| (
        let res = proc(num.@_data.@_value);
        let _ = num; // use num
        res
    );

    force_unique : MPZ -> MPZ;
    force_unique = |src| (
        let (is_unique, src) = src._is_unique_data;
        if is_unique { src };
        let dst = MPZ::_make();
        let _ = dst.borrow_ptr(|dst_ptr| (
            src.borrow_ptr(|src_ptr| (
                FFI_CALL[() fix_mpz_set(Ptr, Ptr), dst_ptr, src_ptr]
            ))
        ));
        dst
    );

    // Return the argument itself if it is unique, or return zero otherwise.
    make_zero_if_non_unique : MPZ -> MPZ;
    make_zero_if_non_unique = |src| (
        let (is_unique, src) = src._is_unique_data;
        if is_unique { src };
        MPZ::_make()
    );

    // Initializations

    zero : MPZ;
    zero = MPZ::_make();

    one : MPZ;
    one = from_I64(1);

    // Assining strings

    set_decimal : String -> MPZ -> Option MPZ;
    set_decimal = |dec, num| (
        let num = num.make_zero_if_non_unique;
        num.borrow_ptr(|ptr| (
            let suc = dec.borrow_c_str(|c_str| (
                FFI_CALL[I64 fix_mpz_set_str(Ptr, Ptr, I64), ptr, c_str, 10]
            ));
            if suc == -1 { Option::none() };
            Option::some $ num
        ))
    );

    from_decimal : String -> Option MPZ;
    from_decimal = |dec| MPZ::zero.set_decimal(dec);

    // Assining integers

    set_I64 : I64 -> MPZ -> MPZ;
    set_I64 = |val, num| (
        let num = num.make_zero_if_non_unique;
        let _ = num.borrow_ptr(|ptr| FFI_CALL[() fix_mpz_set_si(Ptr, I64), ptr, val]);
        num
    );

    from_I64 : I64 -> MPZ;
    from_I64 = |val| MPZ::zero.set_I64(val);

    set_U64 : U64 -> MPZ -> MPZ;
    set_U64 = |val, num| (
        let num = num.make_zero_if_non_unique;
        let _ = num.borrow_ptr(|ptr| FFI_CALL[() fix_mpz_set_ui(Ptr, U64), ptr, val]);
        num
    );

    from_U64 : U64 -> MPZ;
    from_U64 = |val| MPZ::zero.set_U64(val);

    // Divisions

    is_divisible_by : MPZ -> MPZ -> Bool;
    is_divisible_by = |d, n| (
        d.borrow_ptr(|d_ptr| (
            n.borrow_ptr(|n_ptr| (
                FFI_CALL[I64 fix_mpz_divisible_p(Ptr, Ptr), n_ptr, d_ptr] != 0
            ))
        ))
    );

    divide_exactly_by : MPZ -> MPZ -> MPZ;
    divide_exactly_by = |d, n| (
        let out = (
            let (d_is_unique, d) = d._is_unique_data;
            if d_is_unique { d };
            let (n_is_unique, n) = n._is_unique_data;
            if n_is_unique { n };
            MPZ::_make()
        );
        let _ = d.borrow_ptr(|d_ptr| (
            n.borrow_ptr(|n_ptr| (
                out.borrow_ptr(|out_ptr| (
                    FFI_CALL[() fix_mpz_divexact(Ptr, Ptr, Ptr), out_ptr, n_ptr, d_ptr]
                ))
            ))
        ));
        out
    );

    // Arithmetics

    get_gcd : MPZ -> MPZ -> MPZ;
    get_gcd = |lhs, rhs| (
        let out = (
            let (lhs_is_unique, lhs) = lhs._is_unique_data;
            if lhs_is_unique { lhs };
            let (rhs_is_unique, rhs) = rhs._is_unique_data;
            if rhs_is_unique { rhs };
            MPZ::_make()
        );
        lhs.borrow_ptr(|lhs_ptr| (
            rhs.borrow_ptr(|rhs_ptr| (
                out.borrow_ptr(|out_ptr| (
                    let _ = FFI_CALL[() fix_mpz_gcd(Ptr, Ptr, Ptr), out_ptr, lhs_ptr, rhs_ptr];
                    out
                ))
            ))
        ))
    );

    get_lcm : MPZ -> MPZ -> MPZ;
    get_lcm = |lhs, rhs| (
        let out = (
            let (lhs_is_unique, lhs) = lhs._is_unique_data;
            if lhs_is_unique { lhs };
            let (rhs_is_unique, rhs) = rhs._is_unique_data;
            if rhs_is_unique { rhs };
            MPZ::_make()
        );
        lhs.borrow_ptr(|lhs_ptr| (
            rhs.borrow_ptr(|rhs_ptr| (
                out.borrow_ptr(|out_ptr| (
                    let _ = FFI_CALL[() fix_mpz_lcm(Ptr, Ptr, Ptr), out_ptr, lhs_ptr, rhs_ptr];
                    out
                ))
            ))
        ))
    );

    get_binomial : I64 -> MPZ -> MPZ;
    get_binomial = |k, n| (
        if k < 0 { MPZ::zero };
        let out = (
            let (n_is_unique, n) = n._is_unique_data;
            if n_is_unique { n };
            MPZ::_make()
        );
        n.borrow_ptr(|n_ptr| (
            out.borrow_ptr(|out_ptr| (
                let _ = FFI_CALL[() fix_mpz_bin_ui(Ptr, Ptr, I64), out_ptr, n_ptr, k];
                out
            ))
        ))
    );

    get_power : I64 -> MPZ -> MPZ;
    get_power = |exp, n| (
        let _ = assert(|_|"In get_pow, exp should be non-negative.", exp >= 0);
        let out = (
            let (n_is_unique, n) = n._is_unique_data;
            if n_is_unique { n };
            MPZ::_make()
        );
        n.borrow_ptr(|n_ptr| (
            out.borrow_ptr(|out_ptr| (
                let _ = FFI_CALL[() fix_mpz_pow_ui(Ptr, Ptr, I64), out_ptr, n_ptr, exp];
                out
            ))
        ))
    );

    // Bit operations
    
    get_bit : I64 -> MPZ -> I32;
    get_bit = |bit, num| (
        num.borrow_ptr(|num_ptr| (
            FFI_CALL[I32 fix_mpz_tstbit(Ptr, I64), num_ptr, bit]
        ))
    );
}


impl MPZ : Add {

    add = |lhs, rhs| (
        let out = (
            let (lhs_is_unique, lhs) = lhs._is_unique_data;
            if lhs_is_unique { lhs };
            let (rhs_is_unique, rhs) = rhs._is_unique_data;
            if rhs_is_unique { rhs };
            MPZ::_make()
        );
        let _ = lhs.borrow_ptr(|lhs_ptr| (
            rhs.borrow_ptr(|rhs_ptr| (
                out.borrow_ptr(|out_ptr| (
                    FFI_CALL[() fix_mpz_add(Ptr, Ptr, Ptr), out_ptr, lhs_ptr, rhs_ptr]
                ))
            ))
        ));
        out
    );

}

impl MPZ : Sub {

    sub = |lhs, rhs| (
        let out = (
            let (lhs_is_unique, lhs) = lhs._is_unique_data;
            if lhs_is_unique { lhs };
            let (rhs_is_unique, rhs) = rhs._is_unique_data;
            if rhs_is_unique { rhs };
            MPZ::_make()
        );
        let _ = lhs.borrow_ptr(|lhs_ptr| (
            rhs.borrow_ptr(|rhs_ptr| (
                out.borrow_ptr(|out_ptr| (
                    FFI_CALL[() fix_mpz_sub(Ptr, Ptr, Ptr), out_ptr, lhs_ptr, rhs_ptr]
                ))
            ))
        ));
        out
    );

}

impl MPZ : Mul {

    mul = |lhs, rhs| (
        let out = (
            let (lhs_is_unique, lhs) = lhs._is_unique_data;
            if lhs_is_unique { lhs };
            let (rhs_is_unique, rhs) = rhs._is_unique_data;
            if rhs_is_unique { rhs };
            MPZ::_make()
        );
        let _ = lhs.borrow_ptr(|lhs_ptr| (
            rhs.borrow_ptr(|rhs_ptr| (
                out.borrow_ptr(|out_ptr| (
                    FFI_CALL[() fix_mpz_mul(Ptr, Ptr, Ptr), out_ptr, lhs_ptr, rhs_ptr]
                ))
            ))
        ));
        out
    );

}

impl MPZ : Eq {

    eq = |lhs, rhs| (
        lhs.borrow_ptr(|lhs_ptr| (
            rhs.borrow_ptr(|rhs_ptr| (
                FFI_CALL[I64 fix_mpz_cmp(Ptr, Ptr), lhs_ptr, rhs_ptr] == 0
            ))
        ))
    );

}

impl MPZ : LessThan {

    less_than = |lhs, rhs| (
        lhs.borrow_ptr(|lhs_ptr| (
            rhs.borrow_ptr(|rhs_ptr| (
                FFI_CALL[I64 fix_mpz_cmp(Ptr, Ptr), lhs_ptr, rhs_ptr] < 0
            ))
        ))
    );

}

impl MPZ : LessThanOrEq {

    less_than_or_eq = |lhs, rhs| (
        lhs.borrow_ptr(|lhs_ptr| (
            rhs.borrow_ptr(|rhs_ptr| (
                FFI_CALL[I64 fix_mpz_cmp(Ptr, Ptr), lhs_ptr, rhs_ptr] <= 0
            ))
        ))
    );

}

impl MPZ : ToString {

    to_string = |num| (
        num.borrow_ptr(|num_ptr| (
            let len_base = FFI_CALL[I64 fix_mpz_sizeinbase(Ptr, I64), num_ptr, 10];
            let len = len_base + 2;
            let buf = Array::fill(len, 0_U8);
            let _ = buf.borrow_ptr(|ptr| (
                FFI_CALL[Ptr fix_mpz_get_str(Ptr, I64, Ptr), ptr, 10, num_ptr]
            ));
            String::_unsafe_from_c_str(buf)
        ))
    );

}

impl MPZ : Hash {

    hash = to_string >> hash;

}