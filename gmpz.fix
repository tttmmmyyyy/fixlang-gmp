module GMP.Z;

import Hash;

// A pointer to struct `__mpz_struct`.
type MPZHandle = Ptr;

// Size of `__mpz_struct`.
c_SiZE_OF_MPZ : CInt;
c_SiZE_OF_MPZ = 16.to_CInt;

namespace MPZHandle {
    // Construct MPZHandle by GMP's initialization function, e.g., `mpz_init`.
    _construct_by : (MPZHandle -> IO a) -> IO (MPZHandle, a);
    _construct_by = |ctor| (
        let handle = *FFI_CALL_IO[Ptr malloc(CInt), c_SiZE_OF_MPZ];
        let res = *ctor(handle);
        pure $ (handle, res)
    );

    // Calls `mpz_init_set`.
    _copy_constructor : MPZHandle -> IO MPZHandle;
    _copy_constructor = |handle| (
        let new_handle = *FFI_CALL_IO[Ptr malloc(CInt), c_SiZE_OF_MPZ];
        FFI_CALL_IO[() __gmpz_init_set(Ptr, Ptr), new_handle, handle];;
        pure $ new_handle
    );

    // Calls `mpz_clear`.
    _destructor : MPZHandle -> IO MPZHandle;
    _destructor = |handle| (
        FFI_CALL_IO[() __gmpz_clear(Ptr), handle];;
        FFI_CALL_IO[() free(Ptr), handle];;
        pure $ nullptr
    );
}

// Integer type with arbitrary precision.
type MPZ = unbox struct { _0 : Destructor MPZHandle };

namespace MPZ {
    // Swap the elements of a pair.
    _swap_pair : (a, b) -> (b, a);
    _swap_pair = |(a, b)| (b, a);

    // Initialize a new MPZ using specified GMPZ's initialization action.
    _init_by : (MPZHandle -> IO a) -> (MPZ, a);
    _init_by = |ctor| do {
        let (handle, res) = *MPZHandle::_construct_by(ctor);
        pure $ (MPZ { _0 : Destructor::make(handle, MPZHandle::_destructor) }, res)
    }.unsafe_perform;

    // Performs an action with a borrowed pointer to the internal data.
    _borrow : (MPZHandle -> a) -> MPZ -> a;
    _borrow = |act, num| num.@_0.borrow(|handle| act(handle));

    // Acts on the internal data of the MPZ, which may mutate the MPZ value, and returns the mutated MPZ paired with the result of the action.
    _mutate : (MPZHandle -> IO a) -> MPZ -> (MPZ, a);
    _mutate = |act, num| (
        let dtor = num.@_0;
        let (dtor, res) = dtor.mutate_unique(MPZHandle::_copy_constructor, act);
        (MPZ { _0 : dtor }, res)
    );

    // Apply a unary operation of GMP (taking (out, in) as arguments) to a `MPZ` value.
    _unary_op : ((MPZHandle, MPZHandle) -> IO ()) -> MPZ -> MPZ;
    _unary_op = |act, num| (
        let (is_unique, num) = num.unsafe_is_unique;
        if is_unique {
            num._mutate(|num_ptr| act((num_ptr, num_ptr))).@0
        } else {
            num._borrow(|num_ptr|
                MPZ::zero._mutate(|out_ptr| act((out_ptr, num_ptr))).@0
            )
        }
    );

    // Apply a binary operation of GMP (taking (out, lhs, rhs) as arguments) to two `MPZ` values.
    _binary_op : ((MPZHandle, MPZHandle, MPZHandle) -> IO ()) -> MPZ -> MPZ -> MPZ;
    _binary_op = |act, lhs, rhs| (
        let (is_unique, lhs) = lhs.unsafe_is_unique;
        if is_unique { 
            rhs._borrow(|rhs_ptr|
                lhs._mutate(|lhs_ptr| act((lhs_ptr, lhs_ptr, rhs_ptr))).@0
            )
        };
        let (is_uqniue, rhs) = rhs.unsafe_is_unique;
        if is_unique { 
            lhs._borrow(|lhs_ptr|
                rhs._mutate(|rhs_ptr| act((rhs_ptr, lhs_ptr, rhs_ptr))).@0
            )
        };
        lhs._borrow(|lhs_ptr|
            rhs._borrow(|rhs_ptr|
                MPZ::zero._mutate(|out_ptr| act((out_ptr, lhs_ptr, rhs_ptr))).@0
            )
        )
    );
    
    // The zero value.
    zero : MPZ;
    zero = MPZ::_init_by(|handle| FFI_CALL_IO[() __gmpz_init(Ptr), handle]).@0;

    // Sets the value of a MPZ to the given string in the given base.
    // 
    // If the string is not a valid representation of an integer in the given base, this function returns none.
    // See document of `mpz_set_str` in GMP for details.
    set_string : String -> I64 -> MPZ -> Option MPZ;
    set_string = |dec, base, num| (
        dec.borrow_c_str(|dec_c_str| (
            let (num, res) = num._mutate(|ptr| 
                FFI_CALL_IO[CInt __gmpz_set_str(Ptr, Ptr, CInt), ptr, dec_c_str, base.to_CInt]
            );
            if res == -1.to_CInt { Option::none() };
            Option::some $ num
        ))
    );

    // Creates a `MPZ` value represented by a string in the given base.
    // 
    // If the string is not a valid representation of an integer in the given base, this function returns none.
    // See document of `mpz_set_str` in GMP for details.
    from_string : String -> I64 -> Option MPZ;
    from_string = |dec, base| (
        dec.borrow_c_str(|dec_c_str| (
            let (num, res) = MPZ::_init_by(|ptr| 
                FFI_CALL_IO[CInt __gmpz_init_set_str(Ptr, Ptr, CInt), ptr, dec_c_str, base.to_CInt]
            );
            if res == -1.to_CInt { Option::none() };
            Option::some $ num
        ))
    );

    // Creates a `MPZ` value represented by a decimal string.
    // 
    // If the string is not a valid representation of an integer in the given base, this function returns none.
    from_decimal : String -> Option MPZ;
    from_decimal = |dec| MPZ::from_string(dec, 10);

    // Sets the value of a MPZ to the given I64 value.
    set_I64 : I64 -> MPZ -> MPZ;
    set_I64 = |val, num| (
        num._mutate(|ptr| FFI_CALL_IO[() __gmpz_set_si(Ptr, CLong), ptr, val]).@0
    );

    // Creats a `MPZ` value represented by an I64 value.
    from_I64 : I64 -> MPZ;
    from_I64 = |val| MPZ::_init_by(|ptr| FFI_CALL_IO[() __gmpz_init_set_si(Ptr, CLong), ptr, val]).@0;
   
    // Sets the value of a MPZ to the given U64 value.
    set_U64 : U64 -> MPZ -> MPZ;
    set_U64 = |val, num| (
        num._mutate(|ptr| FFI_CALL_IO[() __gmpz_set_ui(Ptr, CUnsignedLong), ptr, val]).@0
    );

    // Creates a `MPZ` value represented by an U64 value.
    from_U64 : U64 -> MPZ;
    from_U64 = |val| MPZ::_init_by(|ptr| FFI_CALL_IO[() __gmpz_init_set_ui(Ptr, CUnsignedLong), ptr, val]).@0;

    // Converts a `MPZ` value to an I64 value.
    // 
    // If the value is too large to fit in an I64, this function returns none.
    to_I64 : MPZ -> Option I64;
    to_I64 = |num| (
        num._borrow(|num_ptr| (
            let fits = FFI_CALL[CInt __gmpz_fits_slong_p(Ptr), num_ptr];
            if fits == 0.to_CInt { Option::none() };
            let res = FFI_CALL[CLong __gmpz_get_si(Ptr), num_ptr];
            Option::some $ res.to_I64
        ))
    );

    // Converts a `MPZ` value to an U64 value.
    //
    // If the value is too large to fit in an U64, this function returns none.
    to_U64 : MPZ -> Option U64;
    to_U64 = |num| (
        num._borrow(|num_ptr| (
            let fits = FFI_CALL[CInt __gmpz_fits_ulong_p(Ptr), num_ptr];
            if fits == 0.to_CInt { Option::none() };
            let res = FFI_CALL[CUnsignedLong __gmpz_get_ui(Ptr), num_ptr];
            Option::some $ res
        ))
    );

    // Converts a `MPZ` value to an F64 value.
    //
    // For details, see the document of `mpz_get_d` in GMP.
    to_F64 : MPZ -> F64;
    to_F64 = |num| (
        num._borrow(|num_ptr| (
            FFI_CALL[CDouble __gmpz_get_d(Ptr), num_ptr].to_F64
        ))
    );

    // Converts a `MPZ` value to the pair (F64 value, exponent).
    // 
    // For details, see the document of `mpz_get_d_2exp` in GMP.
    to_F64_2exp : MPZ -> (F64, I64);
    to_F64_2exp = |num| (
        let exp = Box::make(0.to_CLong);
        let (exp, man) = num._borrow(|num_ptr| exp.mutate_boxed(|exp_ptr| 
            FFI_CALL_IO[CDouble __gmpz_get_d_2exp(Ptr, Ptr), exp_ptr, num_ptr]
        ));
        (man, exp.@value.to_I64)
    );

    // Calculates the absolute value of a `MPZ` value.
    abs : MPZ -> MPZ;
    abs = |num| num._unary_op(|(out_ptr, in_ptr)| FFI_CALL_IO[() __gmpz_abs(Ptr, Ptr), out_ptr, in_ptr]);

    // Multiplication by a power of 2.
    mul_2exp : U64 -> MPZ -> MPZ;
    mul_2exp = |exp, num| (
        num._mutate(|num_ptr| FFI_CALL_IO[() __gmpz_mul_2exp(Ptr, Ptr, CUnsignedLong), num_ptr, num_ptr, exp]).@0
    );

    // Divisions

    is_divisible_by : MPZ -> MPZ -> Bool;
    is_divisible_by = |d, n| (
        d._borrow(|d_ptr| (
            n._borrow(|n_ptr| (
                FFI_CALL[I32 __gmpz_divisible_p(Ptr, Ptr), n_ptr, d_ptr] != 0_I32
            ))
        ))
    );

    divide_exactly_by : MPZ -> MPZ -> MPZ;
    divide_exactly_by = |d, n| (
        MPZ::_binary_op(
            |(out_ptr, lhs_ptr, rhs_ptr)| FFI_CALL_IO[() __gmpz_divexact(Ptr, Ptr, Ptr), out_ptr, lhs_ptr, rhs_ptr],
            n, d
        )
    );

    // // Arithmetics

    // get_gcd : MPZ -> MPZ -> MPZ;
    // get_gcd = |lhs, rhs| (
    //     let out = (
    //         let (lhs_is_unique, lhs) = lhs._is_unique_data;
    //         if lhs_is_unique { lhs };
    //         let (rhs_is_unique, rhs) = rhs._is_unique_data;
    //         if rhs_is_unique { rhs };
    //         MPZ::_make()
    //     );
    //     lhs.borrow_ptr(|lhs_ptr| (
    //         rhs.borrow_ptr(|rhs_ptr| (
    //             out.borrow_ptr(|out_ptr| (
    //                 let _ = FFI_CALL[() fix_mpz_gcd(Ptr, Ptr, Ptr), out_ptr, lhs_ptr, rhs_ptr];
    //                 out
    //             ))
    //         ))
    //     ))
    // );

    // get_lcm : MPZ -> MPZ -> MPZ;
    // get_lcm = |lhs, rhs| (
    //     let out = (
    //         let (lhs_is_unique, lhs) = lhs._is_unique_data;
    //         if lhs_is_unique { lhs };
    //         let (rhs_is_unique, rhs) = rhs._is_unique_data;
    //         if rhs_is_unique { rhs };
    //         MPZ::_make()
    //     );
    //     lhs.borrow_ptr(|lhs_ptr| (
    //         rhs.borrow_ptr(|rhs_ptr| (
    //             out.borrow_ptr(|out_ptr| (
    //                 let _ = FFI_CALL[() fix_mpz_lcm(Ptr, Ptr, Ptr), out_ptr, lhs_ptr, rhs_ptr];
    //                 out
    //             ))
    //         ))
    //     ))
    // );

    // get_binomial : I64 -> MPZ -> MPZ;
    // get_binomial = |k, n| (
    //     if k < 0 { MPZ::zero };
    //     let out = (
    //         let (n_is_unique, n) = n._is_unique_data;
    //         if n_is_unique { n };
    //         MPZ::_make()
    //     );
    //     n.borrow_ptr(|n_ptr| (
    //         out.borrow_ptr(|out_ptr| (
    //             let _ = FFI_CALL[() fix_mpz_bin_ui(Ptr, Ptr, I64), out_ptr, n_ptr, k];
    //             out
    //         ))
    //     ))
    // );

    // get_power : I64 -> MPZ -> MPZ;
    // get_power = |exp, n| (
    //     let _ = assert(|_|"In get_pow, exp should be non-negative.", exp >= 0);
    //     let out = (
    //         let (n_is_unique, n) = n._is_unique_data;
    //         if n_is_unique { n };
    //         MPZ::_make()
    //     );
    //     n.borrow_ptr(|n_ptr| (
    //         out.borrow_ptr(|out_ptr| (
    //             let _ = FFI_CALL[() fix_mpz_pow_ui(Ptr, Ptr, I64), out_ptr, n_ptr, exp];
    //             out
    //         ))
    //     ))
    // );

    // // Bit operations
    
    // get_bit : I64 -> MPZ -> I32;
    // get_bit = |bit, num| (
    //     num.borrow_ptr(|num_ptr| (
    //         FFI_CALL[I32 fix_mpz_tstbit(Ptr, I64), num_ptr, bit]
    //     ))
    // );
}


impl MPZ : Add {
    add = |lhs, rhs| (
        MPZ::_binary_op(
            |(out_ptr, lhs_ptr, rhs_ptr)| FFI_CALL_IO[() __gmpz_add(Ptr, Ptr, Ptr), out_ptr, lhs_ptr, rhs_ptr],
            lhs, rhs
        )
    );
}

impl MPZ : Sub {
    sub = |lhs, rhs| (
        MPZ::_binary_op(
            |(out_ptr, lhs_ptr, rhs_ptr)| FFI_CALL_IO[() __gmpz_sub(Ptr, Ptr, Ptr), out_ptr, lhs_ptr, rhs_ptr],
            lhs, rhs
        )
    );
}

impl MPZ : Mul {
    mul = |lhs, rhs| (
        MPZ::_binary_op(
            |(out_ptr, lhs_ptr, rhs_ptr)| FFI_CALL_IO[() __gmpz_mul(Ptr, Ptr, Ptr), out_ptr, lhs_ptr, rhs_ptr],
            lhs, rhs
        )
    );
}

impl MPZ : Neg {
    neg = |num| (
        num._unary_op(|(out_ptr, in_ptr)| FFI_CALL_IO[() __gmpz_neg(Ptr, Ptr), out_ptr, in_ptr])
    );
}

impl MPZ : Eq {
    eq = |lhs, rhs| (
        lhs._borrow(|lhs_ptr| (
            rhs._borrow(|rhs_ptr| (
                FFI_CALL[I64 __gmpz_cmp(Ptr, Ptr), lhs_ptr, rhs_ptr] == 0
            ))
        ))
    );
}

impl MPZ : Rem {
    rem = |lhs, rhs| (
        MPZ::_binary_op(
            |(out_ptr, lhs_ptr, rhs_ptr)| FFI_CALL_IO[() __gmpz_mod(Ptr, Ptr, Ptr), out_ptr, lhs_ptr, rhs_ptr],
            lhs, rhs
        )
    );
}

// impl MPZ : LessThan {

//     less_than = |lhs, rhs| (
//         lhs.borrow_ptr(|lhs_ptr| (
//             rhs.borrow_ptr(|rhs_ptr| (
//                 FFI_CALL[I64 fix_mpz_cmp(Ptr, Ptr), lhs_ptr, rhs_ptr] < 0
//             ))
//         ))
//     );

// }

// impl MPZ : LessThanOrEq {

//     less_than_or_eq = |lhs, rhs| (
//         lhs.borrow_ptr(|lhs_ptr| (
//             rhs.borrow_ptr(|rhs_ptr| (
//                 FFI_CALL[I64 fix_mpz_cmp(Ptr, Ptr), lhs_ptr, rhs_ptr] <= 0
//             ))
//         ))
//     );

// }

impl MPZ : ToString {
    to_string = |num| (
        num._borrow(|num_ptr| (
            let len_base = FFI_CALL[CSizeT __gmpz_sizeinbase(Ptr, CInt), num_ptr, 10.to_CInt];
            let len = len_base.to_I64 + 2;
            let buf = Array::fill(len, 0_U8);
            let (buf, _) = buf.mutate_boxed(|buf_ptr| 
                FFI_CALL_IO[Ptr __gmpz_get_str(Ptr, CInt, Ptr), buf_ptr, 10.to_CInt, num_ptr]
            );
            String::_unsafe_from_c_str(buf)
        ))
    );
}

impl MPZ : Hash {
    hash = to_string >> hash;
}