module GMP.Z;

import Hash;

// An equivalent type to `__mpz_struct`.
type MPZStruct = box struct {
    _mp_alloc : CInt,
    _mp_size : CInt,
    _mp_d : Ptr
};

namespace MPZStruct {
    _null : MPZStruct;
    _null = MPZStruct {
        _mp_alloc : 0.to_CInt,
        _mp_size : 0.to_CInt,
        _mp_d : nullptr
    };

    // Calls `mpz_init`.
    _constructor : Ptr -> IO ();
    _constructor = |ptr| IO::from_runner $ |ios| FFI_CALL_IO[() __gmpz_init(Ptr), ptr, ios];

    // Calls `mpz_clear`.
    _destructor : MPZStruct -> IO MPZStruct;
    _destructor = |mpz_s| (
        let (mpz_s, _) = *mpz_s.unsafe_mutate_boxed_data_io(|ptr| IO::from_runner $ |ios| FFI_CALL_IO[() __gmpz_clear(Ptr), ptr, ios]);
        pure $ mpz_s
    );

    // Acts on the internal data of the MPZ, which may mutate the MPZ value, and returns the mutated MPZ paired with the result of the action.
    _mutate : (Ptr -> IO a) -> MPZStruct -> (MPZStruct, a);
    _mutate = |act, mpz_s| (
        let (is_unique, mpz_s) = mpz_s.unsafe_is_unique;
        if is_unique {
            mpz_s.unsafe_mutate_boxed_data(|ptr| act(ptr))
        } else {
            // If the data is not unique, we need to copy the data before mutating it.
            mpz_s.unsafe_borrow_boxed_data_ptr(|old_ptr|
                mpz_s.unsafe_mutate_boxed_data(|new_ptr|
                    eval *IO::from_runner(|ios| FFI_CALL_IO[() __gmpz_init_set(Ptr, Ptr), new_ptr, old_ptr, ios]);
                    act(new_ptr)
                )
            )
        }
    );

    // Acts on the internal data of the MPZ, which initializes and sets the MPZ value, and returns the MPZ paired with the result of the action.
    _init_by : (Ptr -> IO a) -> MPZStruct -> (MPZStruct, a);
    _init_by = |act, mpz_s| mpz_s.unsafe_mutate_boxed_data(|ptr| act(ptr));
}

// Integer type with arbitrary precision.
type MPZ = unbox struct { _0 : Destructor MPZStruct };

namespace MPZ {
    // Swap the elements of a pair.
    _swap_pair : (a, b) -> (b, a);
    _swap_pair = |(a, b)| (b, a);

    // Initialize a new MPZ.
    _init : MPZ;
    _init = (
        let (mpz_s, _) = MPZStruct::_null._init_by(MPZStruct::_constructor);
        MPZ { _0 : Destructor::make(mpz_s, MPZStruct::_destructor) }
    );

    // Initialize a new MPZ using specified initialization action.
    _init_by : (Ptr -> IO a) -> (MPZ, a);
    _init_by = |act| (
        let (mpz_s, a) = MPZStruct::_null._init_by(act);
        (MPZ { _0 : Destructor::make(mpz_s, MPZStruct::_destructor) }, a)
    );

    // Performs an action with a borrowed pointer to the internal data.
    _borrow : (Ptr -> a) -> MPZ -> a;
    _borrow = |act, num| num.@_0.borrow(|mpz_s| act(mpz_s._unsafe_get_boxed_data_ptr));

    // Acts on the internal data of the MPZ, which may mutate the MPZ value, and returns the mutated MPZ paired with the result of the action.
    _mutate : (Ptr -> IO a) -> MPZ -> (MPZ, a);
    _mutate = |act, num| _swap_pair $ num.act__0(|dtor|
        dtor.act__value(|mpz_s| _swap_pair $ mpz_s._mutate(act))
    );

    // Apply a binary operation of GMP (taking (out, lhs, rhs) as arguments) to two `MPZ` values.
    _binary_op : ((Ptr, Ptr, Ptr) -> IO ()) -> MPZ -> MPZ -> MPZ;
    _binary_op = |act, lhs, rhs| (
        let (is_unique, lhs) = lhs.unsafe_is_unique;
        if is_unique { 
            rhs._borrow(|rhs_ptr|
                lhs._mutate(|lhs_ptr| act((lhs_ptr, lhs_ptr, rhs_ptr))).@0
            )
        };
        let (is_uqniue, rhs) = rhs.unsafe_is_unique;
        if is_unique { 
            lhs._borrow(|lhs_ptr|
                rhs._mutate(|rhs_ptr| act((rhs_ptr, lhs_ptr, rhs_ptr))).@0
            )
        };
        lhs._borrow(|lhs_ptr|
            rhs._borrow(|rhs_ptr|
                MPZ::_init._mutate(|out_ptr| act((out_ptr, lhs_ptr, rhs_ptr))).@0
            )
        )
    );

    // The zero value.
    zero : MPZ;
    zero = MPZ::_init;

    // Sets the value of a MPZ to the given string in the given base.
    // 
    // If the string is not a valid representation of an integer in the given base, this function returns none.
    // See document of `mpz_set_str` in GMP for details.
    set_string : String -> I64 -> MPZ -> Option MPZ;
    set_string = |dec, base, num| (
        dec.borrow_c_str(|dec_c_str| (
            let (num, res) = num._mutate(|ptr| IO::from_runner $ |ios| 
                FFI_CALL_IO[CInt __gmpz_set_str(Ptr, Ptr, CInt), ptr, dec_c_str, base.to_CInt, ios]
            );
            if res == -1.to_CInt { Option::none() };
            Option::some $ num
        ))
    );

    // Creates a `MPZ` value represented by a string in the given base.
    // 
    // If the string is not a valid representation of an integer in the given base, this function returns none.
    // See document of `mpz_set_str` in GMP for details.
    from_string : String -> I64 -> Option MPZ;
    from_string = |dec, base| (
        dec.borrow_c_str(|dec_c_str| (
            let (num, res) = MPZ::_init_by(|ptr| IO::from_runner $ |ios| 
                FFI_CALL_IO[CInt __gmpz_set_str(Ptr, Ptr, CInt), ptr, dec_c_str, base.to_CInt, ios]
            );
            if res == -1.to_CInt { Option::none() };
            Option::some $ num
        ))
    );

    // Creates a `MPZ` value represented by a decimal string.
    // 
    // If the string is not a valid representation of an integer in the given base, this function returns none.
    from_decimal : String -> Option MPZ;
    from_decimal = |dec| MPZ::from_string(dec, 10);

    // Sets the value of a MPZ to the given I64 value.
    set_I64 : I64 -> MPZ -> MPZ;
    set_I64 = |val, num| (
        num._mutate(|ptr| IO::from_runner $ |ios| FFI_CALL_IO[() __gmpz_set_si(Ptr, CLong), ptr, val, ios]).@0
    );

    // Creats a `MPZ` value represented by an I64 value.
    from_I64 : I64 -> MPZ;
    from_I64 = |val| MPZ::_init_by(|ptr| IO::from_runner $ |ios| FFI_CALL_IO[() __gmpz_init_set_si(Ptr, CLong), ptr, val, ios]).@0;
   
    // Sets the value of a MPZ to the given U64 value.
    set_U64 : U64 -> MPZ -> MPZ;
    set_U64 = |val, num| (
        num._mutate(|ptr| IO::from_runner $ |ios| FFI_CALL_IO[() __gmpz_set_ui(Ptr, CUnsignedLong), ptr, val, ios]).@0
    );

    // Creates a `MPZ` value represented by an U64 value.
    from_U64 : U64 -> MPZ;
    from_U64 = |val| MPZ::_init_by(|ptr| IO::from_runner $ |ios| FFI_CALL_IO[() __gmpz_init_set_ui(Ptr, CUnsignedLong), ptr, val, ios]).@0;

    // Converts a `MPZ` value to an I64 value.
    // 
    // If the value is too large to fit in an I64, this function returns none.
    to_I64 : MPZ -> Option I64;
    to_I64 = |num| (
        num._borrow(|num_ptr| (
            let fits = FFI_CALL[CInt __gmpz_fits_slong_p(Ptr), num_ptr];
            if fits == 0.to_CInt { Option::none() };
            let res = FFI_CALL[CLong __gmpz_get_si(Ptr), num_ptr];
            Option::some $ res.to_I64
        ))
    );

    // Converts a `MPZ` value to an U64 value.
    //
    // If the value is too large to fit in an U64, this function returns none.
    to_U64 : MPZ -> Option U64;
    to_U64 = |num| (
        num._borrow(|num_ptr| (
            let fits = FFI_CALL[CInt __gmpz_fits_ulong_p(Ptr), num_ptr];
            if fits == 0.to_CInt { Option::none() };
            let res = FFI_CALL[CUnsignedLong __gmpz_get_ui(Ptr), num_ptr];
            Option::some $ res
        ))
    );

    // Converts a `MPZ` value to an F64 value.
    //
    // For details, see the document of `mpz_get_d` in GMP.
    to_F64 : MPZ -> F64;
    to_F64 = |num| (
        num._borrow(|num_ptr| (
            FFI_CALL[CDouble __gmpz_get_d(Ptr), num_ptr].to_F64
        ))
    );

    // Converts a `MPZ` value to the pair (F64 value, exponent).
    // 
    // For details, see the document of `mpz_get_d_2exp` in GMP.
    to_F64_2exp : MPZ -> (F64, I64);
    to_F64_2exp = |num| (
        let exp = Boxed { value : 0.to_CInt };
        let (exp, man) = num._borrow(|num_ptr| exp.unsafe_mutate_boxed_data(|exp_ptr| IO::from_runner $ |ios|
            FFI_CALL_IO[CDouble __gmpz_get_d_2exp(Ptr, Ptr), exp_ptr, num_ptr, ios]
        ));
        (man, exp.@value.to_I64)
    );

    // // Divisions

    // is_divisible_by : MPZ -> MPZ -> Bool;
    // is_divisible_by = |d, n| (
    //     d.borrow_ptr(|d_ptr| (
    //         n.borrow_ptr(|n_ptr| (
    //             FFI_CALL[I64 fix_mpz_divisible_p(Ptr, Ptr), n_ptr, d_ptr] != 0
    //         ))
    //     ))
    // );

    // divide_exactly_by : MPZ -> MPZ -> MPZ;
    // divide_exactly_by = |d, n| (
    //     let out = (
    //         let (d_is_unique, d) = d._is_unique_data;
    //         if d_is_unique { d };
    //         let (n_is_unique, n) = n._is_unique_data;
    //         if n_is_unique { n };
    //         MPZ::_make()
    //     );
    //     let _ = d.borrow_ptr(|d_ptr| (
    //         n.borrow_ptr(|n_ptr| (
    //             out.borrow_ptr(|out_ptr| (
    //                 FFI_CALL[() fix_mpz_divexact(Ptr, Ptr, Ptr), out_ptr, n_ptr, d_ptr]
    //             ))
    //         ))
    //     ));
    //     out
    // );

    // // Arithmetics

    // get_gcd : MPZ -> MPZ -> MPZ;
    // get_gcd = |lhs, rhs| (
    //     let out = (
    //         let (lhs_is_unique, lhs) = lhs._is_unique_data;
    //         if lhs_is_unique { lhs };
    //         let (rhs_is_unique, rhs) = rhs._is_unique_data;
    //         if rhs_is_unique { rhs };
    //         MPZ::_make()
    //     );
    //     lhs.borrow_ptr(|lhs_ptr| (
    //         rhs.borrow_ptr(|rhs_ptr| (
    //             out.borrow_ptr(|out_ptr| (
    //                 let _ = FFI_CALL[() fix_mpz_gcd(Ptr, Ptr, Ptr), out_ptr, lhs_ptr, rhs_ptr];
    //                 out
    //             ))
    //         ))
    //     ))
    // );

    // get_lcm : MPZ -> MPZ -> MPZ;
    // get_lcm = |lhs, rhs| (
    //     let out = (
    //         let (lhs_is_unique, lhs) = lhs._is_unique_data;
    //         if lhs_is_unique { lhs };
    //         let (rhs_is_unique, rhs) = rhs._is_unique_data;
    //         if rhs_is_unique { rhs };
    //         MPZ::_make()
    //     );
    //     lhs.borrow_ptr(|lhs_ptr| (
    //         rhs.borrow_ptr(|rhs_ptr| (
    //             out.borrow_ptr(|out_ptr| (
    //                 let _ = FFI_CALL[() fix_mpz_lcm(Ptr, Ptr, Ptr), out_ptr, lhs_ptr, rhs_ptr];
    //                 out
    //             ))
    //         ))
    //     ))
    // );

    // get_binomial : I64 -> MPZ -> MPZ;
    // get_binomial = |k, n| (
    //     if k < 0 { MPZ::zero };
    //     let out = (
    //         let (n_is_unique, n) = n._is_unique_data;
    //         if n_is_unique { n };
    //         MPZ::_make()
    //     );
    //     n.borrow_ptr(|n_ptr| (
    //         out.borrow_ptr(|out_ptr| (
    //             let _ = FFI_CALL[() fix_mpz_bin_ui(Ptr, Ptr, I64), out_ptr, n_ptr, k];
    //             out
    //         ))
    //     ))
    // );

    // get_power : I64 -> MPZ -> MPZ;
    // get_power = |exp, n| (
    //     let _ = assert(|_|"In get_pow, exp should be non-negative.", exp >= 0);
    //     let out = (
    //         let (n_is_unique, n) = n._is_unique_data;
    //         if n_is_unique { n };
    //         MPZ::_make()
    //     );
    //     n.borrow_ptr(|n_ptr| (
    //         out.borrow_ptr(|out_ptr| (
    //             let _ = FFI_CALL[() fix_mpz_pow_ui(Ptr, Ptr, I64), out_ptr, n_ptr, exp];
    //             out
    //         ))
    //     ))
    // );

    // // Bit operations
    
    // get_bit : I64 -> MPZ -> I32;
    // get_bit = |bit, num| (
    //     num.borrow_ptr(|num_ptr| (
    //         FFI_CALL[I32 fix_mpz_tstbit(Ptr, I64), num_ptr, bit]
    //     ))
    // );
}


impl MPZ : Add {
    add = |lhs, rhs| (
        MPZ::_binary_op(
            |(out_ptr, lhs_ptr, rhs_ptr)| IO::from_runner $ |ios| FFI_CALL_IO[() __gmpz_add(Ptr, Ptr, Ptr), out_ptr, lhs_ptr, rhs_ptr, ios],
            lhs, rhs
        )
    );
}

impl MPZ : Sub {
    sub = |lhs, rhs| (
        MPZ::_binary_op(
            |(out_ptr, lhs_ptr, rhs_ptr)| IO::from_runner $ |ios| FFI_CALL_IO[() __gmpz_sub(Ptr, Ptr, Ptr), out_ptr, lhs_ptr, rhs_ptr, ios],
            lhs, rhs
        )
    );
}

impl MPZ : Mul {
    mul = |lhs, rhs| (
        MPZ::_binary_op(
            |(out_ptr, lhs_ptr, rhs_ptr)| IO::from_runner $ |ios| FFI_CALL_IO[() __gmpz_mul(Ptr, Ptr, Ptr), out_ptr, lhs_ptr, rhs_ptr, ios],
            lhs, rhs
        )
    );
}

impl MPZ : Eq {
    eq = |lhs, rhs| (
        lhs._borrow(|lhs_ptr| (
            rhs._borrow(|rhs_ptr| (
                FFI_CALL[I64 __gmpz_cmp(Ptr, Ptr), lhs_ptr, rhs_ptr] == 0
            ))
        ))
    );
}

// impl MPZ : LessThan {

//     less_than = |lhs, rhs| (
//         lhs.borrow_ptr(|lhs_ptr| (
//             rhs.borrow_ptr(|rhs_ptr| (
//                 FFI_CALL[I64 fix_mpz_cmp(Ptr, Ptr), lhs_ptr, rhs_ptr] < 0
//             ))
//         ))
//     );

// }

// impl MPZ : LessThanOrEq {

//     less_than_or_eq = |lhs, rhs| (
//         lhs.borrow_ptr(|lhs_ptr| (
//             rhs.borrow_ptr(|rhs_ptr| (
//                 FFI_CALL[I64 fix_mpz_cmp(Ptr, Ptr), lhs_ptr, rhs_ptr] <= 0
//             ))
//         ))
//     );

// }

impl MPZ : ToString {
    to_string = |num| (
        num._borrow(|num_ptr| (
            let len_base = FFI_CALL[CSizeT __gmpz_sizeinbase(Ptr, CInt), num_ptr, 10.to_CInt];
            let len = len_base.to_I64 + 2;
            let buf = Array::fill(len, 0_U8);
            let (buf, _) = buf.unsafe_mutate_boxed_data(|buf_ptr| IO::from_runner $ |ios|
                FFI_CALL_IO[Ptr __gmpz_get_str(Ptr, CInt, Ptr), buf_ptr, 10.to_CInt, num_ptr, ios]
            );
            String::_unsafe_from_c_str(buf)
        ))
    );
}

impl MPZ : Hash {
    hash = to_string >> hash;
}