module GMP.Q.Test;

import GMP.Z;
import GMP.Q;

test_q : IO ();
test_q = (
    test_q_special_constructor;;
    test_q_conversion;;
    test_q_basic_arithmetic;;
    test_q_comparison;;

    pure()
);

test_q_special_constructor : IO ();
test_q_special_constructor = (
    // zero
    assert_eq(|_|"zero", (zero : MPQ).to_string, "0");;

    // one
    assert_eq(|_|"one", mpq(1, 1).to_string, "1");;

    // mpq
    assert_eq(|_|"mpq", mpq(-14, 12).to_string, "-7/6");;
    assert_eq(|_|"mpq", mpq(-14, -12).to_string, "7/6");;
    assert_eq(|_|"mpq", mpq(I64::minimum, I64::minimum).to_string, "1");;
    assert_eq(|_|"mpq", mpq(I64::minimum + 1, I64::minimum).to_string, "9223372036854775807/9223372036854775808");;
    assert_eq(|_|"mpq", mpq(I64::minimum, -1).to_string, "9223372036854775808");;
    assert_eq(|_|"mpq", mpq(I64::minimum, 1).to_string, "-9223372036854775808");;

    let x = MPQ::mpq(1234, 5678);
    assert_eq(|_|"case 9", x.get_num.to_string, "617");;
    assert_eq(|_|"case 9", x.get_den.to_string, "2839");;

    let x = MPQ::mpq(-1234, 5678);
    assert_eq(|_|"case 10", x.get_num.to_string, "-617");;
    assert_eq(|_|"case 10", x.get_den.to_string, "2839");;

    let x = MPQ::mpq(1234, -5678);
    assert_eq(|_|"case 11", x.get_num.to_string, "-617");;
    assert_eq(|_|"case 11", x.get_den.to_string, "2839");;

    let x = MPQ::mpq(-1234, -5678);
    assert_eq(|_|"case 12", x.get_num.to_string, "617");;
    assert_eq(|_|"case 12", x.get_den.to_string, "2839");;

    let x = MPQ::mpq(1234, 5678);
    assert_eq(|_|"case 13", x.get_num.to_string, "617");;
    assert_eq(|_|"case 13", x.get_den.to_string, "2839");;

    pure()
);

test_q_conversion : IO ();
test_q_conversion = (
    // init_set_si
    let a = MPQ::init_set_si(-4, 6_U64);
    assert_eq(|_|"init_set_si", a.to_string, "-2/3");;

    // set_si 
    let a = a.set_si(-8, 12_U64);
    assert_eq(|_|"set_si", a.to_string, "-2/3");;

    // init_set_ui
    let a = MPQ::init_set_ui(4_U64, 6_U64);
    assert_eq(|_|"init_set_ui", a.to_string, "2/3");;

    // set_ui
    let a = a.set_ui(8_U64, 12_U64);
    assert_eq(|_|"set_ui", a.to_string, "2/3");;

    // init_set_z 
    let a = MPQ::init_set_z(MPZ::init_set_si(-4));
    assert_eq(|_|"init_set_z", a.to_string, "-4");;

    // set_z
    let a = a.set_z(MPZ::init_set_si(-8));
    assert_eq(|_|"set_z", a.to_string, "-8");;

    // init_set_d
    let a = MPQ::init_set_d(4.5);
    assert_eq(|_|"init_set_d", a.to_string, "9/2");;

    // set_d
    let a = a.set_d(8.25);
    assert_eq(|_|"set_d", a.to_string, "33/4");;

    // init_set_str
    let a = MPQ::init_set_str("-1234/5678", 10);
    assert_eq(|_|"init_set_str", a.as_some.to_string, "-617/2839");;
    let a = MPQ::init_set_str("xyz", 10);
    assert(|_|"init_set_str", a.is_none);;

    // set_str
    let a = (zero : MPQ).set_str("1234/5678", 10);
    assert_eq(|_|"set_str", a.as_some.to_string, "617/2839");;
    let a = (zero : MPQ).set_str("xyz", 10);
    assert(|_|"set_str", a.is_none);;

    // get_d
    let z = mpq(1234, 5678);
    let f = z.MPQ::get_d;
    assert_eq(|_|"get_d", f.to_string_precision(9_U8), "0.217330046");;

    // from_string
    let z = from_string("-1234/5678") : Result ErrMsg MPQ;
    assert_eq(|_|"from_string", z.as_ok.to_string, "-617/2839");;
    let z = from_string("xyz") : Result ErrMsg MPQ;
    assert(|_|"from_string", z.is_err);;

    pure()
);

test_q_basic_arithmetic : IO ();
test_q_basic_arithmetic = (
    let x = MPQ::init_set_z(MPZ::init_set_si(1234));
    let y = MPQ::init_set_z(MPZ::init_set_si(5678));
    let z = y / x;
    let n = z.get_num;
    let d = z.get_den;
    assert_eq(|_|"case 1", n.to_string, "2839");;
    assert_eq(|_|"case 1", d.to_string, "617");;

    let xn = MPQ::init_set_z(MPZ::init_set_si(12));
    let xd = MPQ::init_set_z(MPZ::init_set_si(34));
    let yn = MPQ::init_set_z(MPZ::init_set_si(56));
    let yd = MPQ::init_set_z(MPZ::init_set_si(78));
    let x = xn / xd;
    let y = yn / yd;

    let z = x + y;
    assert_eq(|_|"case 3", z.get_num.to_string, "710");;
    assert_eq(|_|"case 3", z.get_den.to_string, "663");;

    let z = x - y;
    assert_eq(|_|"case 4", z.get_num.to_string, "-242");;
    assert_eq(|_|"case 4", z.get_den.to_string, "663");;

    let z = x * y;
    assert_eq(|_|"case 5", z.get_num.to_string, "56");;
    assert_eq(|_|"case 5", z.get_den.to_string, "221");;

    let z = x / y;
    assert_eq(|_|"case 6", z.get_num.to_string, "117");;
    assert_eq(|_|"case 6", z.get_den.to_string, "238");;

    let z = -x;
    assert_eq(|_|"case 7", z.get_num.to_string, "-6");;
    assert_eq(|_|"case 7", z.get_den.to_string, "17");;

    assert_eq(|_|"case 8", (x + -x), zero);;

    // mul_2exp
    let a = mpq(1, 2);
    let b = a.mul_2exp(3_U64);
    assert_eq(|_|"mul_2exp", b.to_string, "4");;

    // div_2exp
    let a = mpq(8, 1);
    let b = a.div_2exp(3_U64);
    assert_eq(|_|"div_2exp", b.to_string, "1");;

    // abs
    let a = mpq(-8, 3);
    let b = a.abs;
    assert_eq(|_|"abs", b.to_string, "8/3");;

    // inv
    let a = mpq(-8, 3);
    let c = a.inv;
    assert_eq(|_|"inv", c.to_string, "-3/8");;

    pure()
);

test_q_comparison : IO ();
test_q_comparison = (

    assert(|_|"cmp", MPQ::cmp(zero, mpq(1, 1)) < 0);;
    assert(|_|"cmp", MPQ::cmp(zero, zero) == 0);;
    assert(|_|"cmp", MPQ::cmp(mpq(1, 1), zero) > 0);;

    assert(|_|"cmp_z", MPQ::cmp_z(zero, mpz(1)) < 0);;
    assert(|_|"cmp_z", MPQ::cmp_z(zero, zero) == 0);;
    assert(|_|"cmp_z", MPQ::cmp_z(mpq(1, 1), zero) > 0);;

    // equal
    assert(|_|"equal", MPQ::equal(zero, zero));;
    assert(|_|"equal", MPQ::equal(mpq(1, 1), mpq(1, 1)));;
    assert(|_|"equal", MPQ::equal(zero, mpq(1, 1)) == false);;

    assert(|_|"==", zero == (zero : MPQ));;
    assert(|_|"==", mpq(1, 1) == mpq(1, 1));;
    assert(|_|"!=", (zero : MPQ) != mpq(1, 1));;
    
    // sgn 
    assert_eq(|_|"sgn zero", MPQ::sgn(zero), 0);;
    assert_eq(|_|"sgn one", MPQ::sgn(mpq(1, 1)), 1);;
    assert_eq(|_|"sgn minus one", MPQ::sgn(-mpq(1, 1)), -1);;

    pure()
);